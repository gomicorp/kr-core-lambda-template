// eslint-disable-next-line max-classes-per-file
import type { Pool } from 'pg';
import { PostgreSqlConnection } from 'ts-sql-query/connections/PostgreSqlConnection';
import { ValueSourceValueType } from 'ts-sql-query/expressions/values';
import { ConsoleLogQueryRunner } from 'ts-sql-query/queryRunners/ConsoleLogQueryRunner';
import { PgPoolQueryRunner } from 'ts-sql-query/queryRunners/PgPoolQueryRunner';
import { Table } from 'ts-sql-query/Table';
import { OptionalColumnsForSetOf, RequiredColumnsForSetOf } from 'ts-sql-query/utils/tableOrViewUtils';

// TODO: table name in the database
const TABLE_NAME = 'product';
// TODO: PK 컬럼명
const primaryKeyColumnName = 'id';

class DBConnection extends PostgreSqlConnection<'DBConnection'> {}

// TODO: 컬럼을 정의해주세요
class TargetTable extends Table<DBConnection, 'targetTable'> {
  id = this.autogeneratedPrimaryKey(primaryKeyColumnName, 'int');
  // example
  prod_cd = this.optionalColumn('prod_cd', 'string');
  prod_des = this.optionalColumn('prod_des', 'string');
  bar_code = this.column('bar_code', 'string');

  constructor() {
    super(TABLE_NAME);
  }
}
const targetTable = new TargetTable();

type TargetTableType = Omit<
  {
    [K in RequiredColumnsForSetOf<typeof targetTable>]: ValueSourceValueType<typeof targetTable[K]>;
  } & {
    [K in OptionalColumnsForSetOf<typeof targetTable>]?: ValueSourceValueType<typeof targetTable[K]>;
  },
  typeof primaryKeyColumnName
>;

const executeInsertSql = (pool: Pool, columns: TargetTableType) => {
  const connection = new DBConnection(new ConsoleLogQueryRunner(new PgPoolQueryRunner(pool)));
  return (
    connection
      .insertInto(targetTable)
      .values(columns)
      // TODO: 중복 체크용 유니크 인덱스 키 설정 필요
      .onConflictOn(targetTable.prod_cd)
      .doUpdateSet(columns)
      // @ts-ignore // alias 없으믄 column reference "integrated_at" is ambiguous 발생
      .where(targetTable.as(TABLE_NAME).integrated_at.isNull())
      // @ts-ignore // alias 없으믄 column reference "integrated_at" is ambiguous 발생
      .or(targetTable.as(TABLE_NAME).integrated_at.lessThanIfValue(columns.integrated_at))
      .executeInsert()
  );
};

// TODO: 컬럼 맵핑 생성
const convertItemToTargetTableValue = (item: any): TargetTableType =>
  ({
    prod_cd: String(item.prod_cd), // prod_cd
    prod_des: String(item.prod_des), // prod_des
    bar_code: String(item.bar_code), // bar_code
  } as TargetTableType);

export { targetTable, executeInsertSql, convertItemToTargetTableValue, TargetTableType };
